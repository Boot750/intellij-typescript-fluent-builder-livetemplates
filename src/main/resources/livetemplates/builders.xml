<templateSet group="Typescript Fluent Builder">
  <template name="withArr" value="private $entityName$Builders: $capitalizedEntityName$Builder[] = [];&#10;&#10;with$capitalizedEntityName$(builderFunction: (builder: $capitalizedEntityName$Builder) =&gt; void = e =&gt; e): $currentBuilderName$ {&#10;    const newBuilder = new $capitalizedEntityName$Builder();&#10;    builderFunction(newBuilder);&#10;    this.$entityName$Builders.push(newBuilder);&#10;    return this;&#10; }" description="With builder array" toReformat="true" toShortenFQNames="true">
    <variable name="entityName" expression="EntityName" defaultValue="Id" alwaysStopAt="true" />
    <variable name="capitalizedEntityName" expression="capitalize(entityName)" defaultValue="" alwaysStopAt="true" />
    <variable name="currentBuilderName" expression="jsClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="withField" value="private $fieldName$: $type$ = $defaultValue$;&#10;&#10;with$capitalizedFieldName$($fieldName$: $type$): $currentBuilderName$ {&#10;    this.$fieldName$ = $fieldName$;&#10;    return this;&#10;}" description="With field" toReformat="true" toShortenFQNames="true">
    <variable name="fieldName" expression="" defaultValue="FieldName" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="string" alwaysStopAt="true" />
    <variable name="defaultValue" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="capitalizedFieldName" expression="capitalize(fieldName)" defaultValue="" alwaysStopAt="true" />
    <variable name="currentBuilderName" expression="jsClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="builder" value="export class $builderName$ {&#10;    constructor(builderFunction: (builder: $builderName$) =&gt; void = (e) =&gt; e) {&#10;        builderFunction(this);&#10;    }&#10;&#10;    build(): $entity$ {&#10;        return {} as $entity$;&#10;    }&#10;}" description="New builder" toReformat="true" toShortenFQNames="true">
    <variable name="builderName" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="entity" expression="substringBefore(builderName, &quot;Builder&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="withNull" value="private $entityName$Builder: $capitalizedEntityName$Builder;&#10;&#10;with$capitalizedEntityName$(&#10;    builderFunction: (builder: $capitalizedEntityName$Builder) =&gt; void = (e) =&gt; e&#10;): $currentBuilder$ {&#10;    const newBuilder = new $capitalizedEntityName$Builder();&#10;    builderFunction(newBuilder);&#10;    this.$entityName$Builder = newBuilder;&#10;    return this;&#10;}" description="With nullable builder" toReformat="true" toShortenFQNames="true">
    <variable name="entityName" expression="" defaultValue="EntityName" alwaysStopAt="true" />
    <variable name="capitalizedEntityName" expression="capitalize(entityName)" defaultValue="" alwaysStopAt="true" />
    <variable name="currentBuilder" expression="jsClassName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="withBuild" value="private $entityName$Builder: $capitalizedEntityName$Builder = new $capitalizedEntityName$Builder();&#10;&#10;with$capitalizedEntityName$(&#10;    builderFunction: (builder: $capitalizedEntityName$Builder) =&gt; void = (e) =&gt; e&#10;): $currentBuilder$ {&#10;    builderFunction(this.$entityName$Builder);&#10;    return this;&#10;}" description="With a non nullable builder" toReformat="true" toShortenFQNames="true">
    <variable name="entityName" expression="" defaultValue="EntityName" alwaysStopAt="true" />
    <variable name="capitalizedEntityName" expression="capitalize(entityName)" defaultValue="" alwaysStopAt="true" />
    <variable name="currentBuilder" expression="jsClassName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>